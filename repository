#!/usr/bin/env python3

"Build metapackages and a repository for them"

import argparse
import os
import shutil
import subprocess
import sys
from abc import ABC, abstractmethod
from contextlib import contextmanager
from pathlib import Path
from string import Template
from tempfile import mkdtemp
from typing import IO, Any, Iterator, Mapping

import yaml

BASE_DIR = Path.cwd()
STATIC_DIR = BASE_DIR / "static"
CONFS_DIR = BASE_DIR / "configs"
PACKAGES_DIR = BASE_DIR / "packages"
REPO_DIR = BASE_DIR / "repo"


def msg(prefix: str, *message: str) -> None:
    """Print error message to stdout."""
    print(f"--> {prefix}:", *message, file=sys.stderr)


def get_distro() -> str:
    """Return the running distribution."""
    data = dict(
        line.split("=", 1) for line in Path("/etc/os-release").read_text().splitlines()
    )
    return data["ID"]


def run(
    cmd: tuple[str, ...],
    stdin: IO[bytes] | None = None,
    env: Mapping[str, str] | None = None,
    cwd: Path | None = None,
) -> str:
    """Execute a process and return its stdout."""
    msg("RUN", *cmd)
    process = subprocess.run(
        cmd,
        stdin=stdin,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        env=env,
        cwd=cwd,
    )
    if process.returncode != 0:
        msg("Command failed", *cmd)
        print("stdout:")
        for line in process.stdout.decode().splitlines():
            print(f"| {line}")
        print("stderr:")
        for line in process.stderr.decode().splitlines():
            print(f"| {line}")
        raise SystemExit(1)
    return process.stdout.decode()


@contextmanager
def tempdir(cleanup: bool = True) -> Iterator[Path]:
    """Contextmanager with temporary directory."""
    path = Path(mkdtemp())
    try:
        yield path
    except Exception:
        if cleanup:
            shutil.rmtree(path)
        raise


class GPG:
    """Wrapper for the gpg command."""

    def __init__(self, work_dir: Path, secret_key: Path) -> None:
        self.gpg_dir = work_dir / "gnupghome"
        self.secret_key = secret_key

    def setup(self) -> None:
        self.gpg_dir.mkdir()
        with self.secret_key.open("rb") as seckey:
            run(
                ("gpg", "--import"),
                stdin=seckey,
                env={"GNUPGHOME": str(self.gpg_dir)},
            )


class Repo(ABC):
    REQUIRED_PACKAGES: frozenset[str]

    def missing_packages(self) -> frozenset[str]:
        return self.REQUIRED_PACKAGES - self.installed_packages()

    @abstractmethod
    def setup(self) -> None: ...

    @abstractmethod
    def build_and_import(self, *packages: Path) -> None: ...

    @abstractmethod
    def installed_packages(self) -> set[str]: ...


class DebRepo(Repo):
    REPO_SUITE = "unstable"

    REQUIRED_PACKAGES = frozenset(
        (
            "equivs",
            "gpg",
            "reprepro",
        )
    )

    def __init__(
        self, work_dir: Path, repo_dir: Path, config_dir: Path, gpg_dir: Path
    ) -> None:
        self.work_dir = work_dir
        self.repo_dir = repo_dir
        self.config_dir = config_dir
        self.gpg_dir = gpg_dir
        self.base_dir = self.work_dir / "reprepro"
        self.packages_dir = self.work_dir / "equivs"

    def setup(self) -> None:
        shutil.rmtree(self.repo_dir, ignore_errors=True)
        self.repo_dir.mkdir()
        self.base_dir.mkdir()
        self.packages_dir.mkdir()

    def build_and_import(self, *packages: Path) -> None:
        for package in packages:
            run(("equivs-build", "-f", str(package)), cwd=self.packages_dir)
            for command, suffix in (
                ("include", "changes"),
                ("includedsc", "dsc"),
            ):
                for path in self.packages_dir.glob(f"{package.name}*.{suffix}"):
                    self._reprepro(
                        "--outdir",
                        str(self.repo_dir),
                        "-VVV",
                        command,
                        self.REPO_SUITE,
                        str(path),
                    )

    def installed_packages(self) -> set[str]:
        return set(
            run(
                ("dpkg-query", "-W", "-f", "${Package} "),
            ).split()
        )

    def _reprepro(self, *args: str) -> None:
        run(
            ("reprepro", *args),
            env={
                "PATH": os.environ["PATH"],
                "REPREPRO_CONFIG_DIR": str(self.config_dir),
                "REPREPRO_BASE_DIR": str(self.base_dir),
                "GNUPGHOME": str(self.gpg_dir),
            },
        )


class ArchRepo(Repo):
    REPO_NAME = "personal"

    REQUIRED_PACKAGES = frozenset(
        (
            "binutils",
            "fakeroot",
            "gnupg",
        )
    )

    def __init__(self, work_dir: Path, repo_dir: Path, gpg_dir: Path) -> None:
        self.work_dir = work_dir
        self.repo_dir = repo_dir
        self.gpg_dir = gpg_dir
        self.base_dir = self.work_dir / "makepkg"

    def setup(self) -> None:
        shutil.rmtree(self.repo_dir, ignore_errors=True)
        self.repo_dir.mkdir()
        self.base_dir.mkdir()

    def build_and_import(self, *packages: Path) -> None:
        for package in packages:
            pkgbuild = self.base_dir / "PKGBUILD"
            shutil.copy(package, pkgbuild)
            self._makepkg(self.base_dir)
            pkgbuild.unlink()
            for path in self.base_dir.glob("*.zst"):
                shutil.copy(path, self.repo_dir)
                self._repo_add()

    def installed_packages(self) -> set[str]:
        return set(line.split(" ")[0] for line in run(("pacman", "-Q")).splitlines())

    def _makepkg(self, path: Path) -> None:
        run(
            ("makepkg",),
            cwd=path,
        )

    def _repo_add(self) -> None:
        packages = (str(path) for path in self.repo_dir.glob("*.zst"))
        run(
            ("repo-add", "--sign", f"{self.REPO_NAME}.db.tar.gz", *packages),
            env={"GNUPGHOME": str(self.gpg_dir)},
            cwd=self.repo_dir,
        )


DISTRO_REPOS = {
    "ubuntu": DebRepo,
    "arch": ArchRepo,
}


def get_packages(work_dir: Path, packages_dir: Path, distro: str) -> Iterator[Path]:
    defs_dir = work_dir / "packages"
    defs_dir.mkdir()

    template = Template((packages_dir / "templates" / f"{distro}.template").read_text())
    for package in (packages_dir / "defs").glob("*.yaml"):
        path = defs_dir / package.stem
        msg("PKG", str(path))
        context = _package_context(package, distro)
        path.write_text(template.substitute(context))
        yield path


def _package_context(source: Path, distro: str) -> dict[str, Any]:
    context: dict[str, Any] = yaml.safe_load(source.read_text())
    deps = []
    for dep in context.pop("dependencies"):
        if isinstance(dep, str):
            deps.append(dep)
        else:
            if entry := dep.get(distro):
                deps.append(entry)
    deps.sort()

    match distro:
        case "ubuntu":
            context["dependencies"] = ", ".join(deps)
        case "arch":
            context["dependencies"] = " ".join(deps)
    return context


def print_deps() -> None:
    distro = get_distro()
    for dep in sorted(DISTRO_REPOS[distro].REQUIRED_PACKAGES):
        print(dep)


def build_repo(keep_workdir: bool) -> None:
    distro = get_distro()

    REPO_DIR.mkdir(exist_ok=True)

    with tempdir(cleanup=not keep_workdir) as work_dir:
        msg("DIR", str(work_dir))
        gpg = GPG(work_dir=work_dir, secret_key=Path("repo.key"))
        gpg.setup()

        repo: Repo
        match distro:
            case "ubuntu":
                repo = DebRepo(
                    work_dir=work_dir,
                    repo_dir=REPO_DIR / "ubuntu",
                    config_dir=CONFS_DIR / "reprepro",
                    gpg_dir=gpg.gpg_dir,
                )
            case "arch":
                repo = ArchRepo(
                    work_dir=work_dir,
                    repo_dir=REPO_DIR / "arch",
                    gpg_dir=gpg.gpg_dir,
                )
            case _:
                msg("Unsuported distribution", distro)
                raise SystemExit(1)

        if missing_packages := repo.missing_packages():
            msg("Missing required packages", ", ".join(sorted(missing_packages)))
            raise SystemExit(1)

        repo.setup()
        packages = get_packages(work_dir, PACKAGES_DIR, distro)
        repo.build_and_import(*packages)

    _add_static_files(REPO_DIR)


def _add_static_files(target_dir: Path) -> None:
    for path in STATIC_DIR.iterdir():
        msg("CPY", path, target_dir)
        shutil.copy(path, target_dir)


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    subparsers = parser.add_subparsers(
        metavar="ACTION", dest="action", help="action to perform"
    )
    subparsers.required = True

    subparsers.add_parser(
        "deps",
        help="print out dependencies for the target distro",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )

    build_action = subparsers.add_parser(
        "build",
        help="build repository",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    build_action.add_argument(
        "--keep-workdir",
        help="keep working directory",
        action="store_true",
        default=False,
    )

    return parser.parse_args()


def main() -> int:
    args = parse_args()
    match args.action:
        case "deps":
            print_deps()
        case "build":
            build_repo(args.keep_workdir)
    return 0


if __name__ == "__main__":
    raise SystemExit(main())
